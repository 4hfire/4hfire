// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	auth "4hfire/api/internal/handler/auth"
	cert "4hfire/api/internal/handler/cert"
	group "4hfire/api/internal/handler/group"
	host "4hfire/api/internal/handler/host"
	rule "4hfire/api/internal/handler/rule"
	staff "4hfire/api/internal/handler/staff"
	tags "4hfire/api/internal/handler/tags"
	"4hfire/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// 登录
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: auth.LoginHandler(serverCtx),
			},
			{
				// otp开启状态
				Method:  http.MethodGet,
				Path:    "/otpState",
				Handler: auth.OtpStateHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/console/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					// 用户详情
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: auth.InfoHandler(serverCtx),
				},
				{
					// 用户退出
					Method:  http.MethodGet,
					Path:    "/logout",
					Handler: auth.LogoutHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/console/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					// 新增凭证
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: cert.AddHandler(serverCtx),
				},
				{
					// 删除凭证
					Method:  http.MethodDelete,
					Path:    "/delete",
					Handler: cert.DeleteHandler(serverCtx),
				},
				{
					// 凭证列表
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: cert.ListHandler(serverCtx),
				},
				{
					// 凭证下拉框
					Method:  http.MethodGet,
					Path:    "/option",
					Handler: cert.OptionHandler(serverCtx),
				},
				{
					// 修改凭证
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: cert.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/console/cert"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					// 新增规则分组
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: group.AddHandler(serverCtx),
				},
				{
					// 删除规则分组
					Method:  http.MethodDelete,
					Path:    "/delete",
					Handler: group.DeleteHandler(serverCtx),
				},
				{
					// 规则分组列表
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: group.ListHandler(serverCtx),
				},
				{
					// 规则分组下拉框
					Method:  http.MethodGet,
					Path:    "/option",
					Handler: group.OptionHandler(serverCtx),
				},
				{
					// 修改规则分组
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: group.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/console/rule/group"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					// 新增主机
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: host.AddHandler(serverCtx),
				},
				{
					// 删除主机
					Method:  http.MethodDelete,
					Path:    "/delete",
					Handler: host.DeleteHandler(serverCtx),
				},
				{
					// 主机列表
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: host.ListHandler(serverCtx),
				},
				{
					// 修改主机
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: host.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/console/host"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					// 新增规则
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: rule.AddHandler(serverCtx),
				},
				{
					// 删除规则
					Method:  http.MethodDelete,
					Path:    "/delete",
					Handler: rule.DeleteHandler(serverCtx),
				},
				{
					// 规则列表
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: rule.ListHandler(serverCtx),
				},
				{
					// 修改规则
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: rule.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/console/rule"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					// 管理员新增
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: staff.AddHandler(serverCtx),
				},
				{
					// 管理员关闭otp
					Method:  http.MethodPost,
					Path:    "/closeOTP",
					Handler: staff.CloseOTPHandler(serverCtx),
				},
				{
					// 关闭自己otp
					Method:  http.MethodGet,
					Path:    "/closeOTPSelf",
					Handler: staff.CloseOTPSelfHandler(serverCtx),
				},
				{
					// 管理员删除管理账户
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: staff.DeleteHandler(serverCtx),
				},
				{
					// 管理员通过账号获取管理员列表
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: staff.ListHandler(serverCtx),
				},
				{
					// 管理员获取otp开启信息
					Method:  http.MethodGet,
					Path:    "/openOTPInfo",
					Handler: staff.OpenOTPInfoHandler(serverCtx),
				},
				{
					// 管理员修改密码
					Method:  http.MethodPost,
					Path:    "/resetPassword",
					Handler: staff.ResetPasswordHandler(serverCtx),
				},
				{
					// 保存otp信息
					Method:  http.MethodPost,
					Path:    "/saveOTP",
					Handler: staff.SaveOTPHandler(serverCtx),
				},
				{
					// 管理员账户切换账号禁用状态
					Method:  http.MethodGet,
					Path:    "/switchForbid",
					Handler: staff.SwitchForbidHandler(serverCtx),
				},
				{
					// 管理员更新数据
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: staff.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/console/staff"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					// 新增标签
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: tags.AddHandler(serverCtx),
				},
				{
					// 删除标签
					Method:  http.MethodDelete,
					Path:    "/delete",
					Handler: tags.DeleteHandler(serverCtx),
				},
				{
					// 标签列表
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: tags.ListHandler(serverCtx),
				},
				{
					// 标签下拉框
					Method:  http.MethodGet,
					Path:    "/option",
					Handler: tags.OptionHandler(serverCtx),
				},
				{
					// 修改标签
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: tags.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/console/tag"),
	)
}
