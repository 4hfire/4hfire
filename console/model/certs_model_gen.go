// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	certsFieldNames          = builder.RawFieldNames(&Certs{})
	certsRows                = strings.Join(certsFieldNames, ",")
	certsRowsExpectAutoSet   = strings.Join(stringx.Remove(certsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	certsRowsWithPlaceHolder = strings.Join(stringx.Remove(certsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCertsIdPrefix   = "cache:certs:id:"
	cacheCertsNamePrefix = "cache:certs:name:"
)

type (
	certsModel interface {
		Insert(ctx context.Context, data *Certs) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Certs, error)
		FindOneByName(ctx context.Context, name string) (*Certs, error)
		Update(ctx context.Context, data *Certs) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultCertsModel struct {
		sqlc.CachedConn
		table string
	}

	Certs struct {
		Id       uint64 `db:"id"`       // id
		Name     string `db:"name"`     // 名称
		Account  string `db:"account"`  // 账号
		Password string `db:"password"` // 密码
		Secret   string `db:"secret"`   // 私钥
		Desc     string `db:"desc"`     // 备注
		Type     uint64 `db:"type"`     // 类型
	}
)

func newCertsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCertsModel {
	return &defaultCertsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`certs`",
	}
}

func (m *defaultCertsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	certsIdKey := fmt.Sprintf("%s%v", cacheCertsIdPrefix, id)
	certsNameKey := fmt.Sprintf("%s%v", cacheCertsNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, certsIdKey, certsNameKey)
	return err
}

func (m *defaultCertsModel) FindOne(ctx context.Context, id uint64) (*Certs, error) {
	certsIdKey := fmt.Sprintf("%s%v", cacheCertsIdPrefix, id)
	var resp Certs
	err := m.QueryRowCtx(ctx, &resp, certsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", certsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCertsModel) FindOneByName(ctx context.Context, name string) (*Certs, error) {
	certsNameKey := fmt.Sprintf("%s%v", cacheCertsNamePrefix, name)
	var resp Certs
	err := m.QueryRowIndexCtx(ctx, &resp, certsNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", certsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCertsModel) Insert(ctx context.Context, data *Certs) (sql.Result, error) {
	certsIdKey := fmt.Sprintf("%s%v", cacheCertsIdPrefix, data.Id)
	certsNameKey := fmt.Sprintf("%s%v", cacheCertsNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, certsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Account, data.Password, data.Secret, data.Desc, data.Type)
	}, certsIdKey, certsNameKey)
	return ret, err
}

func (m *defaultCertsModel) Update(ctx context.Context, newData *Certs) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	certsIdKey := fmt.Sprintf("%s%v", cacheCertsIdPrefix, data.Id)
	certsNameKey := fmt.Sprintf("%s%v", cacheCertsNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, certsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Account, newData.Password, newData.Secret, newData.Desc, newData.Type, newData.Id)
	}, certsIdKey, certsNameKey)
	return err
}

func (m *defaultCertsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCertsIdPrefix, primary)
}

func (m *defaultCertsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", certsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCertsModel) tableName() string {
	return m.table
}
