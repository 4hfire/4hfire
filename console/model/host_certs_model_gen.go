// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	hostCertsFieldNames          = builder.RawFieldNames(&HostCerts{})
	hostCertsRows                = strings.Join(hostCertsFieldNames, ",")
	hostCertsRowsExpectAutoSet   = strings.Join(stringx.Remove(hostCertsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	hostCertsRowsWithPlaceHolder = strings.Join(stringx.Remove(hostCertsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHostCertsIdPrefix = "cache:hostCerts:id:"
)

type (
	hostCertsModel interface {
		Insert(ctx context.Context, data *HostCerts) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*HostCerts, error)
		Update(ctx context.Context, data *HostCerts) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultHostCertsModel struct {
		sqlc.CachedConn
		table string
	}

	HostCerts struct {
		Id       uint64 `db:"id"`       // 主机ID
		Account  string `db:"account"`  // 账号
		Password string `db:"password"` // 密码
		Secret   string `db:"secret"`   // 私钥
		CertId   uint64 `db:"certId"`   // 凭证ID
		Type     uint64 `db:"type"`     // 类型
	}
)

func newHostCertsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultHostCertsModel {
	return &defaultHostCertsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`hostCerts`",
	}
}

func (m *defaultHostCertsModel) Delete(ctx context.Context, id uint64) error {
	hostCertsIdKey := fmt.Sprintf("%s%v", cacheHostCertsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, hostCertsIdKey)
	return err
}

func (m *defaultHostCertsModel) FindOne(ctx context.Context, id uint64) (*HostCerts, error) {
	hostCertsIdKey := fmt.Sprintf("%s%v", cacheHostCertsIdPrefix, id)
	var resp HostCerts
	err := m.QueryRowCtx(ctx, &resp, hostCertsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", hostCertsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHostCertsModel) Insert(ctx context.Context, data *HostCerts) (sql.Result, error) {
	hostCertsIdKey := fmt.Sprintf("%s%v", cacheHostCertsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, hostCertsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Account, data.Password, data.Secret, data.CertId, data.Type)
	}, hostCertsIdKey)
	return ret, err
}

func (m *defaultHostCertsModel) Update(ctx context.Context, data *HostCerts) error {
	hostCertsIdKey := fmt.Sprintf("%s%v", cacheHostCertsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, hostCertsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Account, data.Password, data.Secret, data.CertId, data.Type, data.Id)
	}, hostCertsIdKey)
	return err
}

func (m *defaultHostCertsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHostCertsIdPrefix, primary)
}

func (m *defaultHostCertsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", hostCertsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultHostCertsModel) tableName() string {
	return m.table
}
