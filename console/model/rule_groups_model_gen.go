// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ruleGroupsFieldNames          = builder.RawFieldNames(&RuleGroups{})
	ruleGroupsRows                = strings.Join(ruleGroupsFieldNames, ",")
	ruleGroupsRowsExpectAutoSet   = strings.Join(stringx.Remove(ruleGroupsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	ruleGroupsRowsWithPlaceHolder = strings.Join(stringx.Remove(ruleGroupsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheRuleGroupsIdPrefix   = "cache:ruleGroups:id:"
	cacheRuleGroupsNamePrefix = "cache:ruleGroups:name:"
)

type (
	ruleGroupsModel interface {
		Insert(ctx context.Context, data *RuleGroups) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*RuleGroups, error)
		FindOneByName(ctx context.Context, name string) (*RuleGroups, error)
		Update(ctx context.Context, data *RuleGroups) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultRuleGroupsModel struct {
		sqlc.CachedConn
		table string
	}

	RuleGroups struct {
		Id   uint64 `db:"id"`
		Name string `db:"name"` // 名称
		Desc string `db:"desc"` // 备注
		Tags string `db:"tags"` // 所属标签
	}
)

func newRuleGroupsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRuleGroupsModel {
	return &defaultRuleGroupsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`ruleGroups`",
	}
}

func (m *defaultRuleGroupsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ruleGroupsIdKey := fmt.Sprintf("%s%v", cacheRuleGroupsIdPrefix, id)
	ruleGroupsNameKey := fmt.Sprintf("%s%v", cacheRuleGroupsNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ruleGroupsIdKey, ruleGroupsNameKey)
	return err
}

func (m *defaultRuleGroupsModel) FindOne(ctx context.Context, id uint64) (*RuleGroups, error) {
	ruleGroupsIdKey := fmt.Sprintf("%s%v", cacheRuleGroupsIdPrefix, id)
	var resp RuleGroups
	err := m.QueryRowCtx(ctx, &resp, ruleGroupsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ruleGroupsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuleGroupsModel) FindOneByName(ctx context.Context, name string) (*RuleGroups, error) {
	ruleGroupsNameKey := fmt.Sprintf("%s%v", cacheRuleGroupsNamePrefix, name)
	var resp RuleGroups
	err := m.QueryRowIndexCtx(ctx, &resp, ruleGroupsNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", ruleGroupsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuleGroupsModel) Insert(ctx context.Context, data *RuleGroups) (sql.Result, error) {
	ruleGroupsIdKey := fmt.Sprintf("%s%v", cacheRuleGroupsIdPrefix, data.Id)
	ruleGroupsNameKey := fmt.Sprintf("%s%v", cacheRuleGroupsNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, ruleGroupsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.Desc, data.Tags)
	}, ruleGroupsIdKey, ruleGroupsNameKey)
	return ret, err
}

func (m *defaultRuleGroupsModel) Update(ctx context.Context, newData *RuleGroups) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ruleGroupsIdKey := fmt.Sprintf("%s%v", cacheRuleGroupsIdPrefix, data.Id)
	ruleGroupsNameKey := fmt.Sprintf("%s%v", cacheRuleGroupsNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ruleGroupsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Desc, newData.Tags, newData.Id)
	}, ruleGroupsIdKey, ruleGroupsNameKey)
	return err
}

func (m *defaultRuleGroupsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheRuleGroupsIdPrefix, primary)
}

func (m *defaultRuleGroupsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ruleGroupsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRuleGroupsModel) tableName() string {
	return m.table
}
