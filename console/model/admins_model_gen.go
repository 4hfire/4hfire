// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminsFieldNames          = builder.RawFieldNames(&Admins{})
	adminsRows                = strings.Join(adminsFieldNames, ",")
	adminsRowsExpectAutoSet   = strings.Join(stringx.Remove(adminsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	adminsRowsWithPlaceHolder = strings.Join(stringx.Remove(adminsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAdminsIdPrefix      = "cache:admins:id:"
	cacheAdminsAccountPrefix = "cache:admins:account:"
	cacheAdminsUidPrefix     = "cache:admins:uid:"
)

type (
	adminsModel interface {
		Insert(ctx context.Context, data *Admins) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Admins, error)
		FindOneByAccount(ctx context.Context, account string) (*Admins, error)
		FindOneByUid(ctx context.Context, uid string) (*Admins, error)
		Update(ctx context.Context, data *Admins) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultAdminsModel struct {
		sqlc.CachedConn
		table string
	}

	Admins struct {
		Id            uint64 `db:"id"`            // 用户ID
		Uid           string `db:"uid"`           // uid
		Name          string `db:"name"`          // 用户名称
		Account       string `db:"account"`       // 账号
		Password      string `db:"password"`      // 密码
		Phone         string `db:"phone"`         // 手机号
		IsDisable     uint64 `db:"isDisable"`     // 状态
		Email         string `db:"email"`         // 邮箱
		Otp           int64  `db:"otp"`           // otp 状态
		Code          string `db:"code"`          // otp code
		CreatedAt     int64  `db:"createdAt"`     // 创建时间
		UpdatedAt     int64  `db:"updatedAt"`     // 更新时间
		LastLoginTime int64  `db:"lastLoginTime"` // 最后登陆时间
	}
)

func newAdminsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAdminsModel {
	return &defaultAdminsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`admins`",
	}
}

func (m *defaultAdminsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	adminsAccountKey := fmt.Sprintf("%s%v", cacheAdminsAccountPrefix, data.Account)
	adminsIdKey := fmt.Sprintf("%s%v", cacheAdminsIdPrefix, id)
	adminsUidKey := fmt.Sprintf("%s%v", cacheAdminsUidPrefix, data.Uid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, adminsAccountKey, adminsIdKey, adminsUidKey)
	return err
}

func (m *defaultAdminsModel) FindOne(ctx context.Context, id uint64) (*Admins, error) {
	adminsIdKey := fmt.Sprintf("%s%v", cacheAdminsIdPrefix, id)
	var resp Admins
	err := m.QueryRowCtx(ctx, &resp, adminsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminsModel) FindOneByAccount(ctx context.Context, account string) (*Admins, error) {
	adminsAccountKey := fmt.Sprintf("%s%v", cacheAdminsAccountPrefix, account)
	var resp Admins
	err := m.QueryRowIndexCtx(ctx, &resp, adminsAccountKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `account` = ? limit 1", adminsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, account); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminsModel) FindOneByUid(ctx context.Context, uid string) (*Admins, error) {
	adminsUidKey := fmt.Sprintf("%s%v", cacheAdminsUidPrefix, uid)
	var resp Admins
	err := m.QueryRowIndexCtx(ctx, &resp, adminsUidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `uid` = ? limit 1", adminsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminsModel) Insert(ctx context.Context, data *Admins) (sql.Result, error) {
	adminsAccountKey := fmt.Sprintf("%s%v", cacheAdminsAccountPrefix, data.Account)
	adminsIdKey := fmt.Sprintf("%s%v", cacheAdminsIdPrefix, data.Id)
	adminsUidKey := fmt.Sprintf("%s%v", cacheAdminsUidPrefix, data.Uid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, adminsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.Name, data.Account, data.Password, data.Phone, data.IsDisable, data.Email, data.Otp, data.Code, data.CreatedAt, data.UpdatedAt, data.LastLoginTime)
	}, adminsAccountKey, adminsIdKey, adminsUidKey)
	return ret, err
}

func (m *defaultAdminsModel) Update(ctx context.Context, newData *Admins) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	adminsAccountKey := fmt.Sprintf("%s%v", cacheAdminsAccountPrefix, data.Account)
	adminsIdKey := fmt.Sprintf("%s%v", cacheAdminsIdPrefix, data.Id)
	adminsUidKey := fmt.Sprintf("%s%v", cacheAdminsUidPrefix, data.Uid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, adminsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Uid, newData.Name, newData.Account, newData.Password, newData.Phone, newData.IsDisable, newData.Email, newData.Otp, newData.Code, newData.CreatedAt, newData.UpdatedAt, newData.LastLoginTime, newData.Id)
	}, adminsAccountKey, adminsIdKey, adminsUidKey)
	return err
}

func (m *defaultAdminsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAdminsIdPrefix, primary)
}

func (m *defaultAdminsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAdminsModel) tableName() string {
	return m.table
}
