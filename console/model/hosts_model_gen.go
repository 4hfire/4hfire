// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	hostsFieldNames          = builder.RawFieldNames(&Hosts{})
	hostsRows                = strings.Join(hostsFieldNames, ",")
	hostsRowsExpectAutoSet   = strings.Join(stringx.Remove(hostsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	hostsRowsWithPlaceHolder = strings.Join(stringx.Remove(hostsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHostsIdPrefix   = "cache:hosts:id:"
	cacheHostsUuidPrefix = "cache:hosts:uuid:"
)

type (
	hostsModel interface {
		Insert(ctx context.Context, data *Hosts) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Hosts, error)
		FindOneByUuid(ctx context.Context, uuid string) (*Hosts, error)
		Update(ctx context.Context, data *Hosts) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultHostsModel struct {
		sqlc.CachedConn
		table string
	}

	Hosts struct {
		Id        uint64 `db:"id"`        // id
		Uuid      string `db:"uuid"`      // 主机uuid
		Secret    string `db:"secret"`    // 主机密钥
		Address   string `db:"address"`   // 主机地址
		Tags      string `db:"tags"`      // 所属标签
		Name      string `db:"name"`      // 主机名称
		Desc      string `db:"desc"`      // 备注
		State     uint64 `db:"state"`     // 状态
		Cpu       string `db:"cpu"`       // cpu信息
		Mem       string `db:"mem"`       // 内存信息
		UpdatedAt int64  `db:"updatedAt"` // 更新时间
	}
)

func newHostsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultHostsModel {
	return &defaultHostsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`hosts`",
	}
}

func (m *defaultHostsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	hostsIdKey := fmt.Sprintf("%s%v", cacheHostsIdPrefix, id)
	hostsUuidKey := fmt.Sprintf("%s%v", cacheHostsUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, hostsIdKey, hostsUuidKey)
	return err
}

func (m *defaultHostsModel) FindOne(ctx context.Context, id uint64) (*Hosts, error) {
	hostsIdKey := fmt.Sprintf("%s%v", cacheHostsIdPrefix, id)
	var resp Hosts
	err := m.QueryRowCtx(ctx, &resp, hostsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", hostsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHostsModel) FindOneByUuid(ctx context.Context, uuid string) (*Hosts, error) {
	hostsUuidKey := fmt.Sprintf("%s%v", cacheHostsUuidPrefix, uuid)
	var resp Hosts
	err := m.QueryRowIndexCtx(ctx, &resp, hostsUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `uuid` = ? limit 1", hostsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHostsModel) Insert(ctx context.Context, data *Hosts) (sql.Result, error) {
	hostsIdKey := fmt.Sprintf("%s%v", cacheHostsIdPrefix, data.Id)
	hostsUuidKey := fmt.Sprintf("%s%v", cacheHostsUuidPrefix, data.Uuid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, hostsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Uuid, data.Secret, data.Address, data.Tags, data.Name, data.Desc, data.State, data.Cpu, data.Mem, data.UpdatedAt)
	}, hostsIdKey, hostsUuidKey)
	return ret, err
}

func (m *defaultHostsModel) Update(ctx context.Context, newData *Hosts) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	hostsIdKey := fmt.Sprintf("%s%v", cacheHostsIdPrefix, data.Id)
	hostsUuidKey := fmt.Sprintf("%s%v", cacheHostsUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, hostsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Uuid, newData.Secret, newData.Address, newData.Tags, newData.Name, newData.Desc, newData.State, newData.Cpu, newData.Mem, newData.UpdatedAt, newData.Id)
	}, hostsIdKey, hostsUuidKey)
	return err
}

func (m *defaultHostsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHostsIdPrefix, primary)
}

func (m *defaultHostsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", hostsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultHostsModel) tableName() string {
	return m.table
}
