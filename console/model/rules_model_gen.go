// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rulesFieldNames          = builder.RawFieldNames(&Rules{})
	rulesRows                = strings.Join(rulesFieldNames, ",")
	rulesRowsExpectAutoSet   = strings.Join(stringx.Remove(rulesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	rulesRowsWithPlaceHolder = strings.Join(stringx.Remove(rulesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheRulesIdPrefix   = "cache:rules:id:"
	cacheRulesNamePrefix = "cache:rules:name:"
)

type (
	rulesModel interface {
		Insert(ctx context.Context, data *Rules) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Rules, error)
		FindOneByName(ctx context.Context, name string) (*Rules, error)
		Update(ctx context.Context, data *Rules) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultRulesModel struct {
		sqlc.CachedConn
		table string
	}

	Rules struct {
		Id        uint64 `db:"id"`        // ID
		Name      string `db:"name"`      // 名称
		Desc      string `db:"desc"`      // 备注
		Tags      string `db:"tags"`      // 所属标签
		GroupId   uint64 `db:"groupId"`   // 所属分组
		Interface string `db:"interface"` // 网卡
		Sip       string `db:"sip"`       // 源IP
		Sport     string `db:"sport"`     // 源端口
		Dip       string `db:"dip"`       // 目的IP
		Dport     string `db:"dport"`     // 目的端口
		Option    uint64 `db:"option"`    // 规则动作：accept/drop
		Enable    uint64 `db:"enable"`    // 启用状态
	}
)

func newRulesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRulesModel {
	return &defaultRulesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`rules`",
	}
}

func (m *defaultRulesModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	rulesIdKey := fmt.Sprintf("%s%v", cacheRulesIdPrefix, id)
	rulesNameKey := fmt.Sprintf("%s%v", cacheRulesNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, rulesIdKey, rulesNameKey)
	return err
}

func (m *defaultRulesModel) FindOne(ctx context.Context, id uint64) (*Rules, error) {
	rulesIdKey := fmt.Sprintf("%s%v", cacheRulesIdPrefix, id)
	var resp Rules
	err := m.QueryRowCtx(ctx, &resp, rulesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rulesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRulesModel) FindOneByName(ctx context.Context, name string) (*Rules, error) {
	rulesNameKey := fmt.Sprintf("%s%v", cacheRulesNamePrefix, name)
	var resp Rules
	err := m.QueryRowIndexCtx(ctx, &resp, rulesNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", rulesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRulesModel) Insert(ctx context.Context, data *Rules) (sql.Result, error) {
	rulesIdKey := fmt.Sprintf("%s%v", cacheRulesIdPrefix, data.Id)
	rulesNameKey := fmt.Sprintf("%s%v", cacheRulesNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, rulesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Desc, data.Tags, data.GroupId, data.Interface, data.Sip, data.Sport, data.Dip, data.Dport, data.Option, data.Enable)
	}, rulesIdKey, rulesNameKey)
	return ret, err
}

func (m *defaultRulesModel) Update(ctx context.Context, newData *Rules) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	rulesIdKey := fmt.Sprintf("%s%v", cacheRulesIdPrefix, data.Id)
	rulesNameKey := fmt.Sprintf("%s%v", cacheRulesNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, rulesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Desc, newData.Tags, newData.GroupId, newData.Interface, newData.Sip, newData.Sport, newData.Dip, newData.Dport, newData.Option, newData.Enable, newData.Id)
	}, rulesIdKey, rulesNameKey)
	return err
}

func (m *defaultRulesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheRulesIdPrefix, primary)
}

func (m *defaultRulesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rulesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRulesModel) tableName() string {
	return m.table
}
